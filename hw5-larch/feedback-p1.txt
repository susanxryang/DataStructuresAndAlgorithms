# Feedback

Group larch: xuanry, zydai66

Commit hash: 9321ad1372c8766cf1d8345d158393126504d692

Raw score: 42 / 50

## Checkstyle

Score: 5 / 5

## ArrayHeap

Score: 18 / 20

-   PASS: (weight=1.0) testAddAndRemoveMinBasic
-   PASS: (weight=1.0) testAddDuplicateEntries
        Description: Adds the same few unique elements twice and checks that the correct exception
            is thrown during for the second, duplicate insertion.

-   PASS: (weight=1.0) testAddEquivalentValues
        Description: Adds many IntWrappers with equivalent values into the heap. (Recall that
            IntWrappers are compared by value but equality is tested by reference.) Then the test
            verifies correct ordering by repeatedly calling peekMin and removeMin.

-   PASS: (weight=1.0) testAddNullEntriesThrowsException
        Description: Verifies that the correct exception is thrown when null values are added into
            the heap.

-   PASS: (weight=1.0) testChecksAllChildren
        Description: Verifies that percolating downwards works when the minimum child is in any of
            the 4 possible positions. (Uses reflection to check that the internal array exactly
            matches the expected state.)

-   PASS: (weight=0.4) testContainsAfterRemove
        Description: Verifies that contains works correctly after calling remove or removeMin.

-   PASS: (weight=0.4) testContainsAfterReplace
        Description: Verifies that contains works correctly after calling replace.

-   PASS: (weight=0.4) testContainsBasic
        Description: A basic test case for contains.

-   PASS: (weight=0.4) testContainsNullThrowsException
        Description: Verifies that calling contains with a null value throws the correct exception.

-   PASS: (weight=0.4) testContainsOnEmptyHeap
        Description: Verifies that contains works correctly value on an empty heap.

-   PASS: (weight=1.0) testInternalStructure
        Description: randomly inserts random elements or calls removeMin many times (order of
            magnitude 10,000). After each method call, it uses reflection to verify that the
            internal array represents a valid min-4-heap (each value is less than or equal to its
            children).

-   PASS: (weight=0.5) testPeekMin
        Description: Tests both that peekMin returns the minimum and that subsequently calling
            removeMin returns the same value.

-   PASS: (weight=0.5) testPeekMinOnEmptyQueueThrowsException
        Description: Calling peekMin on an empty ArrayHeap should throw an EmptyContainerException -
            if this test fails, that was not the case for your code. This test also inserts and
            removes before testing the EmptyContainerException case.

-   PASS: (weight=1.0) testRandomEntries
        Description: Adds random values to the heap a random number of times, then empties the heap
            while verifying that peekMin and removeMin return the expected sorted sequence. This is
            repeated 1000 times.

-   PASS: (weight=0.3) testRemoveAddSameItem
        Description: Verifies that an element can be re-added to a heap after it has been removed
            from the heap.

-   PASS: (weight=0.3) testRemoveEquivalentValuesThrowsException
        Description: Attempts to remove a new IntWrapper object with the same *value* as an elements
            in a heap. Expects an exception, since the new IntWrapper object is not in the heap.

-   PASS: (weight=1.0) testRemoveMinOnEmptyQueueThrowsException
        Description: Calling removeMin on an empty ArrayHeap should throw an EmptyContainerException
            - if this test fails, that was not the case for your code. This test also inserts and
            removes before testing the EmptyContainerException case.

-   PASS: (weight=2.0) testRemoveMinStress
-   PASS: (weight=0.3) testRemoveMissingItemThrowsException
        Description: Tests that calling remove on an element that isn't in the heap throws the
            correct exception. Afterwards, it also checks that a valid removal is stil successful.

-   PASS: (weight=0.3) testRemoveNullItemThrowsException
        Description: Tests that removing null from an empty heap throws the correct exception.

-   PASS: (weight=0.3) testRemoveOnEmptyQueueThrowsException
        Description: Tests that calling remove on an empty heap throws the correct exception.

-   FAIL: (weight=0.3) testRemovePercolateDown
        Description: Removes an element from a heap that should trigger a downwards percolatation,
            and then uses reflection to verify that internal array represents a valid min-4-heap.
        java.lang.AssertionError
        	at org.junit.Assert.fail(Assert.java:86)
        	at org.junit.Assert.assertTrue(Assert.java:41)
        	at org.junit.Assert.assertTrue(Assert.java:52)
        	at secret.TestSecretArrayHeap.assertHeapIsValid(TestSecretArrayHeap.java:287)
        	at secret.TestSecretArrayHeap.testRemovePercolateDown(TestSecretArrayHeap.java:420)
        	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        	at java.lang.reflect.Method.invoke(Method.java:498)
        	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        	at java.lang.Thread.run(Thread.java:748)

-   FAIL: (weight=0.3) testRemovePercolateUp
        Description: Removes an element from a heap that should trigger an upwards percolation, and
            then uses reflection to verify that internal array represents a valid min-4-heap.
        java.lang.AssertionError
        	at org.junit.Assert.fail(Assert.java:86)
        	at org.junit.Assert.assertTrue(Assert.java:41)
        	at org.junit.Assert.assertTrue(Assert.java:52)
        	at secret.TestSecretArrayHeap.assertHeapIsValid(TestSecretArrayHeap.java:287)
        	at secret.TestSecretArrayHeap.testRemovePercolateUp(TestSecretArrayHeap.java:401)
        	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        	at java.lang.reflect.Method.invoke(Method.java:498)
        	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        	at java.lang.Thread.run(Thread.java:748)

-   PASS: (weight=0.3) testRemoveRootConsecutive
        Description: Adds many elements (order of magnitude 1,000), and then repeatedly removes the
            value returned by peekMin (once for each element added). It verifies the heap is empty
            afterward. Also, after every remove call, we use reflection to verify that internal
            array correctly represents a min-4-heap.

-   FAIL: (weight=0.6) testRemoveStress
        Description: Verifies that remove runs efficienctly on large heap sizes (order of magnitude
            10,000).
        java.lang.NullPointerException
        	at java.lang.Integer.compareTo(Integer.java:1216)
        	at java.lang.Integer.compareTo(Integer.java:52)
        	at datastructures.concrete.ArrayHeap.percolate(ArrayHeap.java:107)
        	at datastructures.concrete.ArrayHeap.remove(ArrayHeap.java:191)
        	at secret.TestSecretArrayHeap.testRemoveStress(TestSecretArrayHeap.java:662)
            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        	at java.lang.reflect.Method.invoke(Method.java:498)
        	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        	at java.lang.Thread.run(Thread.java:748)

-   PASS: (weight=0.3) testRemoveUpdatesSize
        Description: Verifies that calling remove correctly updates the size of the heap.

-   PASS: (weight=0.3) testReplaceDoesNotChangeSize
        Description: Verifies that size is correct after calling replace.

-   PASS: (weight=0.3) testReplaceLastElement
        Description: Calls replace on the last element in a heap, and then uses reflection to verify
            that the internal array represents a valid min-4-heap.

-   PASS: (weight=0.3) testReplaceMinElement
        Description: Calls replace on the smallest element in a heap and uses reflection to verify
            that it represents a valid min-4-heap afterwards.

-   PASS: (weight=0.3) testReplaceOnEmptyHeap
        Description: Verifies that calling replace on an empty heap throws the correct exception.

-   PASS: (weight=0.3) testReplaceOnlyElement
        Description: Calls replace on the only element in a single-element heap, and then calls
            removeMin to verify that the element was correctly replaced.

-   PASS: (weight=0.6) testReplaceStress
        Description: Verifies that replace runs efficiently on large heap sizes (order of magnitude
            10,000).

-   PASS: (weight=0.3) testReplaceWithEquivalentValues
        Description: Verifies that replacing elements only works when reference equality holds and
            otherwise throws the correct exception (even if the first argument has an equivalent
            *value* to an element in the heap).

-   PASS: (weight=0.3) testReplaceWithExistingElementThrowsException
        Description: Verifies that replacing an element with a value that's already in the heap
            throws the correct exception.

-   PASS: (weight=1.0) testStringEntries
        Description: Inserts a handful of String elements and checks that peekMin then removeMin
            over the whole heap returns the expected sorted sequence.

## Sorter

Score: 10 / 10

-   PASS: (weight=1.0) testAlreadySortedInput
        Description: Verifies that an input sorted sequence still results in a correctly sorted
            output.

-   PASS: (weight=1.0) testEquivalentValuedEntries
-   PASS: (weight=1.0) testInputListNotMutated
        Description: Verifies that the input list is not mutated.

-   PASS: (weight=5.0) testIsNLogK
        Description: This test is on the runners; checks whether the runtime of topKSort is in
            O(n*log(k)) by counting comparison operations.

-   PASS: (weight=1.0) testKEqualsN
        Description: Verifies that the corrected sorted sequence is returned for a random list of
            size ~100 and k = that size.

-   PASS: (weight=1.0) testKIsGreaterThanN
        Description: Verifies that the correct sorted sequence is returned for a random list of size
            ~100 and k > that size.

-   PASS: (weight=2.0) testKIsLessThanN
        Description: Verifies that the corrected sorted sequence is returned for a random list of
            size ~100 and k < 10.

-   PASS: (weight=1.0) testKIsNegative
        Description: Verifies that the correct exception is thrown for negative values of k.

-   PASS: (weight=1.0) testKIsOne
        Description: Verifies that the correct sorted sequence is returned for k of 1 and a
            reasonably large n.

-   PASS: (weight=1.0) testKIsZero
        Description: Verifies the top 0 elements are returned for k = 0 (i.e., the output is a list
            of size 0).

-   PASS: (weight=1.0) testNIsOne
        Description: Verifies the correct sorted sequence is returned for n of 1 and a small k.

-   PASS: (weight=1.0) testNIsZero
-   PASS: (weight=1.0) testNonIntegerEntries
        Description: Verifies that topKSort works correctly for a List<String> input.

## TestArrayHeap

Score: 6 / 10

-   PASS: (weight=1.0) AllOk
-   PASS: (weight=1.0) AddDoesNotResize
        Description: This implementation never resizes its internal array.

-   PASS: (weight=1.0) AddDoesNotThrowExceptions
-   PASS: (weight=1.0) PeekMinDoesNotThrowExceptions
-   PASS: (weight=1.0) RemoveMinDoesNotThrowExceptions
-   PASS: (weight=1.0) PercolateDownAssumesAllParentsHaveFourChildren
        Description: This implementation assumes that all elements with at least one child have
            exactly 4 children while percolating. It also leaves some old elements in the array when
            removing so that percolations are less likely to cause null pointer exceptions.

-   FAIL: (weight=1.0) PercolateDownChecksOnlyThreeChildren
        Description: This implementation uses a faulty downwards percolation that ignores one child
            when percolating elements with four children.
        Your tests incorrectly reported this buggy implementation as correct.

-   FAIL: (weight=1.0) PercolateDownSwapsOnlyOneLevel
        Description: This implementation only percolates downwards by one level at a time instead of
            percolating until the heap is valid.
        Your tests incorrectly reported this buggy implementation as correct.

-   FAIL: (weight=1.0) PercolateUpSwapsOnlyOneLevel
        Description: This implementation only percolates upwards by one level at a time instead of
            percolating until the heap is valid.
        Your tests incorrectly reported this buggy implementation as correct.

-   FAIL: (weight=1.0) ReplaceChangesSize
        Your tests incorrectly reported this buggy implementation as correct.

-   PASS: (weight=0.5) SwapDoesNotUpdateIndicesInDictionary
-   PASS: (weight=0.5) RemovingDoesNotRemoveIndicesFromDictionary
        Description: This implementation does not correctly remove elements from the dictionary of
            indices during remove or removeMin.

## TestSorter

Score: 3 / 5

-   PASS: (weight=1.0) AllOk
-   PASS: (weight=1.0) DoesNotThrowExceptionForNegativeK
-   FAIL: (weight=1.0) DoesNotHandleKEqualsZero
        Description: This implementation does not explicitly handle the k=0 case, which usually ends
            up throwing an exception (except in some corner cases).
        Your tests incorrectly reported this buggy implementation as correct.

-   PASS: (weight=1.0) AssumesKAlwaysLessThanN
-   PASS: (weight=1.0) ReturnsLastKElements
        Description: This implementation sorts and returns the last k elements of the input list.

-   FAIL: (weight=1.0) MutatesInput
        Your tests incorrectly reported this buggy implementation as correct.
